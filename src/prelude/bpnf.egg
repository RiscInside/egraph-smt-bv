; <summary>bpnf.egg - bit propogation normal form rules</summary>

; These rules are based on Concat Normal Form and Bit Propogation Normal Form
; papers. We try to identify things that are roughly similar.

; ### Reassociating concats

(rewrite (Concat a (Concat b c)) (Concat (Concat a b) c) :subsume :ruleset safe)

; ### Pushing extractions through concatenations

(rule ((= e (Extract i j (Concat a b))) (= bw (Width b)) (< i bw))
      ((subsume (Extract i j (Concat a b))) (union e (Extract i j b)))
      :ruleset safe)
(rule ((= e (Extract i j (Concat a b))) (= bw (Width b)) (>= j bw))
      ((subsume (Extract i j (Concat a b))) (union e (Extract (- i bw) (- j bw) a)))
      :ruleset safe)
(rule ((= e (Extract i j (Concat a b))) (= bw (Width b)) (>= i bw) (< j bw))
      ((subsume (Extract i j (Concat a b))) (union e (Concat (Extract (- i bw) 0 a) (Extract (- bw 1) j b))))
      :ruleset safe)

; ### Full width extractions

(rule ((= e (Extract w 0 i)) (= (+ w 1) (Width i))) ((delete (Extract w 0 i)) (union e i)) :ruleset safe)

; ### Concat of two adjacent extractions

(rule ((= e (Concat (Extract i j a) (Extract j k a))))
      ((union e (Extract i k a))
       (subsume (Concat (Extract i j a) (Extract j k a)))) :ruleset safe)

; ### Equality of two concats

; Concat is injective if operands have the same biwidth.

(rule ((= (Concat a b) (Concat c d)) (= (Width a) (Width c))) ((union a c) (union b d)) :ruleset safe)

; This is a more complicated version when a and b have different bitwidths.

(rule ((= (Concat a b) (Concat c d))
       (= aw (Width a)) (= bw (Width b))
       (= cw (Width c)) (= dw (Width d))
       (< bw dw)
      ) (
       (union b (Extract (- bw 1) 0 d))
       (union (Extract (- (- dw bw) 1) 0 a) (Extract (- dw 1) bw d))
       (union c (Extract (- aw 1) (- dw bw) a))
      ) :ruleset safe)
