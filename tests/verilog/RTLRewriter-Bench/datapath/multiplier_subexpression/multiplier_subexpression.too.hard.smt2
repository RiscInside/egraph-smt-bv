(set-logic QF_UFBV)

; SMT-LIBv2 description generated by Yosys 0.50+7 (git sha1 b0b53a22b, clang++ 18.1.8 -fPIC -O3)
; yosys-smt2-stbv
; yosys-smt2-module optimized
(define-sort |optimized_s| () (_ BitVec 17))
(define-fun |optimized_is| ((state |optimized_s|)) Bool (= ((_ extract 0 0) state) #b1))
(define-fun |optimized#0| ((state |optimized_s|)) (_ BitVec 8) ((_ extract 8 1) state)) ; \multiplicand
; yosys-smt2-input multiplicand 8
; yosys-smt2-witness {"offset": 0, "path": ["\\multiplicand"], "smtname": "multiplicand", "smtoffset": 0, "type": "input", "width": 8}
(define-fun |optimized_n multiplicand| ((state |optimized_s|)) (_ BitVec 8) (|optimized#0| state))
(define-fun |optimized#1| ((state |optimized_s|)) (_ BitVec 8) ((_ extract 16 9) state)) ; \multiplier
; yosys-smt2-input multiplier 8
; yosys-smt2-witness {"offset": 0, "path": ["\\multiplier"], "smtname": "multiplier", "smtoffset": 0, "type": "input", "width": 8}
(define-fun |optimized_n multiplier| ((state |optimized_s|)) (_ BitVec 8) (|optimized#1| state))
(define-fun |optimized#2| ((state |optimized_s|)) (_ BitVec 16) (ite (= ((_ extract 0 0) (|optimized#1| state)) #b1) (concat #b00000000 (|optimized#0| state)) #b0000000000000000)) ; $ternary$optimized.v:13$10_Y
(define-fun |optimized#3| ((state |optimized_s|)) (_ BitVec 16) (ite (= ((_ extract 1 1) (|optimized#1| state)) #b1) (concat #b0000000 (concat (|optimized#0| state) #b0)) #b0000000000000000)) ; $ternary$optimized.v:13$12_Y
(define-fun |optimized#4| ((state |optimized_s|)) (_ BitVec 16) (bvadd (|optimized#2| state) (|optimized#3| state))) ; $add$optimized.v:21$3_Y
(define-fun |optimized#5| ((state |optimized_s|)) (_ BitVec 16) (ite (= ((_ extract 2 2) (|optimized#1| state)) #b1) (concat #b000000 (concat (|optimized#0| state) #b00)) #b0000000000000000)) ; $ternary$optimized.v:13$14_Y
(define-fun |optimized#6| ((state |optimized_s|)) (_ BitVec 16) (ite (= ((_ extract 3 3) (|optimized#1| state)) #b1) (concat #b00000 (concat (|optimized#0| state) #b000)) #b0000000000000000)) ; $ternary$optimized.v:13$16_Y
(define-fun |optimized#7| ((state |optimized_s|)) (_ BitVec 16) (bvadd (|optimized#5| state) (|optimized#6| state))) ; $add$optimized.v:22$4_Y
(define-fun |optimized#8| ((state |optimized_s|)) (_ BitVec 16) (bvadd (|optimized#4| state) (|optimized#7| state))) ; $add$optimized.v:26$7_Y
(define-fun |optimized#9| ((state |optimized_s|)) (_ BitVec 16) (ite (= ((_ extract 4 4) (|optimized#1| state)) #b1) (concat #b0000 (concat (|optimized#0| state) #b0000)) #b0000000000000000)) ; $ternary$optimized.v:13$18_Y
(define-fun |optimized#10| ((state |optimized_s|)) (_ BitVec 16) (ite (= ((_ extract 5 5) (|optimized#1| state)) #b1) (concat #b000 (concat (|optimized#0| state) #b00000)) #b0000000000000000)) ; $ternary$optimized.v:13$20_Y
(define-fun |optimized#11| ((state |optimized_s|)) (_ BitVec 16) (bvadd (|optimized#9| state) (|optimized#10| state))) ; $add$optimized.v:23$5_Y
(define-fun |optimized#12| ((state |optimized_s|)) (_ BitVec 16) (ite (= ((_ extract 6 6) (|optimized#1| state)) #b1) (concat #b00 (concat (|optimized#0| state) #b000000)) #b0000000000000000)) ; $ternary$optimized.v:13$22_Y
(define-fun |optimized#13| ((state |optimized_s|)) (_ BitVec 16) (ite (= ((_ extract 7 7) (|optimized#1| state)) #b1) (concat #b0 (concat (|optimized#0| state) #b0000000)) #b0000000000000000)) ; $ternary$optimized.v:13$24_Y
(define-fun |optimized#14| ((state |optimized_s|)) (_ BitVec 16) (bvadd (|optimized#12| state) (|optimized#13| state))) ; $add$optimized.v:24$6_Y
(define-fun |optimized#15| ((state |optimized_s|)) (_ BitVec 16) (bvadd (|optimized#11| state) (|optimized#14| state))) ; $add$optimized.v:27$8_Y
(define-fun |optimized#16| ((state |optimized_s|)) (_ BitVec 16) (bvadd (|optimized#8| state) (|optimized#15| state))) ; $add$optimized.v:29$1_Y
; yosys-smt2-output product 16
(define-fun |optimized_n product| ((state |optimized_s|)) (_ BitVec 16) (|optimized#16| state))
(define-fun |optimized_a| ((state |optimized_s|)) Bool true)
(define-fun |optimized_u| ((state |optimized_s|)) Bool true)
(define-fun |optimized_i| ((state |optimized_s|)) Bool true)
(define-fun |optimized_h| ((state |optimized_s|)) Bool true)
(define-fun |optimized_t| ((state |optimized_s|) (next_state |optimized_s|)) Bool true) ; end of module optimized
; yosys-smt2-module unoptimized
(define-sort |unoptimized_s| () (_ BitVec 17))
(define-fun |unoptimized_is| ((state |unoptimized_s|)) Bool (= ((_ extract 0 0) state) #b1))
(define-fun |unoptimized#0| ((state |unoptimized_s|)) (_ BitVec 8) ((_ extract 8 1) state)) ; \multiplicand
; yosys-smt2-input multiplicand 8
; yosys-smt2-witness {"offset": 0, "path": ["\\multiplicand"], "smtname": "multiplicand", "smtoffset": 0, "type": "input", "width": 8}
(define-fun |unoptimized_n multiplicand| ((state |unoptimized_s|)) (_ BitVec 8) (|unoptimized#0| state))
(define-fun |unoptimized#1| ((state |unoptimized_s|)) (_ BitVec 8) ((_ extract 16 9) state)) ; \multiplier
; yosys-smt2-input multiplier 8
; yosys-smt2-witness {"offset": 0, "path": ["\\multiplier"], "smtname": "multiplier", "smtoffset": 0, "type": "input", "width": 8}
(define-fun |unoptimized_n multiplier| ((state |unoptimized_s|)) (_ BitVec 8) (|unoptimized#1| state))
(define-fun |unoptimized#2| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 0 0) (|unoptimized#0| state)) ((_ extract 0 0) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$33_Y
(define-fun |unoptimized#3| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 0 0) (|unoptimized#0| state)) ((_ extract 1 1) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$34_Y
(define-fun |unoptimized#4| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 0 0) (|unoptimized#0| state)) ((_ extract 2 2) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$35_Y
(define-fun |unoptimized#5| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 0 0) (|unoptimized#0| state)) ((_ extract 3 3) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$36_Y
(define-fun |unoptimized#6| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 0 0) (|unoptimized#0| state)) ((_ extract 4 4) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$37_Y
(define-fun |unoptimized#7| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 0 0) (|unoptimized#0| state)) ((_ extract 5 5) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$38_Y
(define-fun |unoptimized#8| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 0 0) (|unoptimized#0| state)) ((_ extract 6 6) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$39_Y
(define-fun |unoptimized#9| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 0 0) (|unoptimized#0| state)) ((_ extract 7 7) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$40_Y
(define-fun |unoptimized#10| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 1 1) (|unoptimized#0| state)) ((_ extract 0 0) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$41_Y
(define-fun |unoptimized#11| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 1 1) (|unoptimized#0| state)) ((_ extract 1 1) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$42_Y
(define-fun |unoptimized#12| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 1 1) (|unoptimized#0| state)) ((_ extract 2 2) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$43_Y
(define-fun |unoptimized#13| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 1 1) (|unoptimized#0| state)) ((_ extract 3 3) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$44_Y
(define-fun |unoptimized#14| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 1 1) (|unoptimized#0| state)) ((_ extract 4 4) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$45_Y
(define-fun |unoptimized#15| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 1 1) (|unoptimized#0| state)) ((_ extract 5 5) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$46_Y
(define-fun |unoptimized#16| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 1 1) (|unoptimized#0| state)) ((_ extract 6 6) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$47_Y
(define-fun |unoptimized#17| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 1 1) (|unoptimized#0| state)) ((_ extract 7 7) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$48_Y
(define-fun |unoptimized#18| ((state |unoptimized_s|)) (_ BitVec 16) (bvadd (concat #b00000000 (concat (|unoptimized#9| state) (concat (|unoptimized#8| state) (concat (|unoptimized#7| state) (concat (|unoptimized#6| state) (concat (|unoptimized#5| state) (concat (|unoptimized#4| state) (concat (|unoptimized#3| state) (|unoptimized#2| state))))))))) (concat #b0000000 (concat (|unoptimized#17| state) (concat (|unoptimized#16| state) (concat (|unoptimized#15| state) (concat (|unoptimized#14| state) (concat (|unoptimized#13| state) (concat (|unoptimized#12| state) (concat (|unoptimized#11| state) (concat (|unoptimized#10| state) #b0))))))))))) ; $add$unoptimized.v:32$97_Y
(define-fun |unoptimized#19| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 2 2) (|unoptimized#0| state)) ((_ extract 0 0) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$49_Y
(define-fun |unoptimized#20| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 2 2) (|unoptimized#0| state)) ((_ extract 1 1) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$50_Y
(define-fun |unoptimized#21| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 2 2) (|unoptimized#0| state)) ((_ extract 2 2) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$51_Y
(define-fun |unoptimized#22| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 2 2) (|unoptimized#0| state)) ((_ extract 3 3) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$52_Y
(define-fun |unoptimized#23| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 2 2) (|unoptimized#0| state)) ((_ extract 4 4) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$53_Y
(define-fun |unoptimized#24| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 2 2) (|unoptimized#0| state)) ((_ extract 5 5) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$54_Y
(define-fun |unoptimized#25| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 2 2) (|unoptimized#0| state)) ((_ extract 6 6) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$55_Y
(define-fun |unoptimized#26| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 2 2) (|unoptimized#0| state)) ((_ extract 7 7) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$56_Y
(define-fun |unoptimized#27| ((state |unoptimized_s|)) (_ BitVec 16) (bvadd (|unoptimized#18| state) (concat #b000000 (concat (|unoptimized#26| state) (concat (|unoptimized#25| state) (concat (|unoptimized#24| state) (concat (|unoptimized#23| state) (concat (|unoptimized#22| state) (concat (|unoptimized#21| state) (concat (|unoptimized#20| state) (concat (|unoptimized#19| state) #b00))))))))))) ; $add$unoptimized.v:32$98_Y
(define-fun |unoptimized#28| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 3 3) (|unoptimized#0| state)) ((_ extract 0 0) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$57_Y
(define-fun |unoptimized#29| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 3 3) (|unoptimized#0| state)) ((_ extract 1 1) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$58_Y
(define-fun |unoptimized#30| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 3 3) (|unoptimized#0| state)) ((_ extract 2 2) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$59_Y
(define-fun |unoptimized#31| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 3 3) (|unoptimized#0| state)) ((_ extract 3 3) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$60_Y
(define-fun |unoptimized#32| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 3 3) (|unoptimized#0| state)) ((_ extract 4 4) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$61_Y
(define-fun |unoptimized#33| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 3 3) (|unoptimized#0| state)) ((_ extract 5 5) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$62_Y
(define-fun |unoptimized#34| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 3 3) (|unoptimized#0| state)) ((_ extract 6 6) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$63_Y
(define-fun |unoptimized#35| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 3 3) (|unoptimized#0| state)) ((_ extract 7 7) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$64_Y
(define-fun |unoptimized#36| ((state |unoptimized_s|)) (_ BitVec 16) (bvadd (|unoptimized#27| state) (concat #b00000 (concat (|unoptimized#35| state) (concat (|unoptimized#34| state) (concat (|unoptimized#33| state) (concat (|unoptimized#32| state) (concat (|unoptimized#31| state) (concat (|unoptimized#30| state) (concat (|unoptimized#29| state) (concat (|unoptimized#28| state) #b000))))))))))) ; $add$unoptimized.v:32$99_Y
(define-fun |unoptimized#37| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 4 4) (|unoptimized#0| state)) ((_ extract 0 0) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$65_Y
(define-fun |unoptimized#38| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 4 4) (|unoptimized#0| state)) ((_ extract 1 1) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$66_Y
(define-fun |unoptimized#39| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 4 4) (|unoptimized#0| state)) ((_ extract 2 2) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$67_Y
(define-fun |unoptimized#40| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 4 4) (|unoptimized#0| state)) ((_ extract 3 3) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$68_Y
(define-fun |unoptimized#41| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 4 4) (|unoptimized#0| state)) ((_ extract 4 4) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$69_Y
(define-fun |unoptimized#42| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 4 4) (|unoptimized#0| state)) ((_ extract 5 5) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$70_Y
(define-fun |unoptimized#43| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 4 4) (|unoptimized#0| state)) ((_ extract 6 6) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$71_Y
(define-fun |unoptimized#44| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 4 4) (|unoptimized#0| state)) ((_ extract 7 7) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$72_Y
(define-fun |unoptimized#45| ((state |unoptimized_s|)) (_ BitVec 16) (bvadd (|unoptimized#36| state) (concat #b0000 (concat (|unoptimized#44| state) (concat (|unoptimized#43| state) (concat (|unoptimized#42| state) (concat (|unoptimized#41| state) (concat (|unoptimized#40| state) (concat (|unoptimized#39| state) (concat (|unoptimized#38| state) (concat (|unoptimized#37| state) #b0000))))))))))) ; $add$unoptimized.v:32$100_Y
(define-fun |unoptimized#46| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 5 5) (|unoptimized#0| state)) ((_ extract 0 0) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$73_Y
(define-fun |unoptimized#47| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 5 5) (|unoptimized#0| state)) ((_ extract 1 1) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$74_Y
(define-fun |unoptimized#48| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 5 5) (|unoptimized#0| state)) ((_ extract 2 2) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$75_Y
(define-fun |unoptimized#49| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 5 5) (|unoptimized#0| state)) ((_ extract 3 3) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$76_Y
(define-fun |unoptimized#50| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 5 5) (|unoptimized#0| state)) ((_ extract 4 4) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$77_Y
(define-fun |unoptimized#51| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 5 5) (|unoptimized#0| state)) ((_ extract 5 5) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$78_Y
(define-fun |unoptimized#52| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 5 5) (|unoptimized#0| state)) ((_ extract 6 6) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$79_Y
(define-fun |unoptimized#53| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 5 5) (|unoptimized#0| state)) ((_ extract 7 7) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$80_Y
(define-fun |unoptimized#54| ((state |unoptimized_s|)) (_ BitVec 16) (bvadd (|unoptimized#45| state) (concat #b000 (concat (|unoptimized#53| state) (concat (|unoptimized#52| state) (concat (|unoptimized#51| state) (concat (|unoptimized#50| state) (concat (|unoptimized#49| state) (concat (|unoptimized#48| state) (concat (|unoptimized#47| state) (concat (|unoptimized#46| state) #b00000))))))))))) ; $add$unoptimized.v:32$101_Y
(define-fun |unoptimized#55| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 6 6) (|unoptimized#0| state)) ((_ extract 0 0) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$81_Y
(define-fun |unoptimized#56| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 6 6) (|unoptimized#0| state)) ((_ extract 1 1) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$82_Y
(define-fun |unoptimized#57| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 6 6) (|unoptimized#0| state)) ((_ extract 2 2) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$83_Y
(define-fun |unoptimized#58| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 6 6) (|unoptimized#0| state)) ((_ extract 3 3) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$84_Y
(define-fun |unoptimized#59| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 6 6) (|unoptimized#0| state)) ((_ extract 4 4) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$85_Y
(define-fun |unoptimized#60| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 6 6) (|unoptimized#0| state)) ((_ extract 5 5) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$86_Y
(define-fun |unoptimized#61| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 6 6) (|unoptimized#0| state)) ((_ extract 6 6) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$87_Y
(define-fun |unoptimized#62| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 6 6) (|unoptimized#0| state)) ((_ extract 7 7) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$88_Y
(define-fun |unoptimized#63| ((state |unoptimized_s|)) (_ BitVec 16) (bvadd (|unoptimized#54| state) (concat #b00 (concat (|unoptimized#62| state) (concat (|unoptimized#61| state) (concat (|unoptimized#60| state) (concat (|unoptimized#59| state) (concat (|unoptimized#58| state) (concat (|unoptimized#57| state) (concat (|unoptimized#56| state) (concat (|unoptimized#55| state) #b000000))))))))))) ; $add$unoptimized.v:32$102_Y
(define-fun |unoptimized#64| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 7 7) (|unoptimized#0| state)) ((_ extract 0 0) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$89_Y
(define-fun |unoptimized#65| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 7 7) (|unoptimized#0| state)) ((_ extract 1 1) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$90_Y
(define-fun |unoptimized#66| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 7 7) (|unoptimized#0| state)) ((_ extract 2 2) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$91_Y
(define-fun |unoptimized#67| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 7 7) (|unoptimized#0| state)) ((_ extract 3 3) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$92_Y
(define-fun |unoptimized#68| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 7 7) (|unoptimized#0| state)) ((_ extract 4 4) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$93_Y
(define-fun |unoptimized#69| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 7 7) (|unoptimized#0| state)) ((_ extract 5 5) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$94_Y
(define-fun |unoptimized#70| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 7 7) (|unoptimized#0| state)) ((_ extract 6 6) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$95_Y
(define-fun |unoptimized#71| ((state |unoptimized_s|)) (_ BitVec 1) (bvand ((_ extract 7 7) (|unoptimized#0| state)) ((_ extract 7 7) (|unoptimized#1| state)))) ; $and$unoptimized.v:17$96_Y
(define-fun |unoptimized#72| ((state |unoptimized_s|)) (_ BitVec 16) (bvadd (|unoptimized#63| state) (concat #b0 (concat (|unoptimized#71| state) (concat (|unoptimized#70| state) (concat (|unoptimized#69| state) (concat (|unoptimized#68| state) (concat (|unoptimized#67| state) (concat (|unoptimized#66| state) (concat (|unoptimized#65| state) (concat (|unoptimized#64| state) #b0000000))))))))))) ; $add$unoptimized.v:32$103_Y
; yosys-smt2-output product 16
(define-fun |unoptimized_n product| ((state |unoptimized_s|)) (_ BitVec 16) (|unoptimized#72| state))
(define-fun |unoptimized_a| ((state |unoptimized_s|)) Bool true)
(define-fun |unoptimized_u| ((state |unoptimized_s|)) Bool true)
(define-fun |unoptimized_i| ((state |unoptimized_s|)) Bool true)
(define-fun |unoptimized_h| ((state |unoptimized_s|)) Bool true)
(define-fun |unoptimized_t| ((state |unoptimized_s|) (next_state |unoptimized_s|)) Bool true) ; end of module unoptimized
; yosys-smt2-module miter
(define-sort |miter_s| () (_ BitVec 83))
(define-fun |miter_is| ((state |miter_s|)) Bool (= ((_ extract 0 0) state) #b1))
; yosys-smt2-cell optimized gold
; yosys-smt2-witness {"path": ["\\gold"], "smtname": "gold", "type": "cell"}
(define-fun |miter#0| ((state |miter_s|)) (_ BitVec 16) ((_ extract 16 1) state)) ; \gold_product
(define-fun |miter_h gold| ((state |miter_s|)) (_ BitVec 17) ((_ extract 33 17) state))
; yosys-smt2-cell unoptimized gate
; yosys-smt2-witness {"path": ["\\gate"], "smtname": "gate", "type": "cell"}
(define-fun |miter#1| ((state |miter_s|)) (_ BitVec 16) ((_ extract 49 34) state)) ; \gate_product
(define-fun |miter_h gate| ((state |miter_s|)) (_ BitVec 17) ((_ extract 66 50) state))
(define-fun |miter#2| ((state |miter_s|)) Bool (= (|miter#0| state) (|miter#1| state))) ; $auto$miter.cc:242:create_miter_equiv$105
(define-fun |miter#3| ((state |miter_s|)) (_ BitVec 1) (bvnot (ite (|miter#2| state) #b1 #b0))) ; \trigger
; yosys-smt2-output trigger 1
(define-fun |miter_n trigger| ((state |miter_s|)) Bool (= ((_ extract 0 0) (|miter#3| state)) #b1))
(define-fun |miter#4| ((state |miter_s|)) (_ BitVec 8) ((_ extract 74 67) state)) ; \in_multiplier
; yosys-smt2-input in_multiplier 8
; yosys-smt2-witness {"offset": 0, "path": ["\\in_multiplier"], "smtname": "in_multiplier", "smtoffset": 0, "type": "input", "width": 8}
(define-fun |miter_n in_multiplier| ((state |miter_s|)) (_ BitVec 8) (|miter#4| state))
(define-fun |miter#5| ((state |miter_s|)) (_ BitVec 8) ((_ extract 82 75) state)) ; \in_multiplicand
; yosys-smt2-input in_multiplicand 8
; yosys-smt2-witness {"offset": 0, "path": ["\\in_multiplicand"], "smtname": "in_multiplicand", "smtoffset": 0, "type": "input", "width": 8}
(define-fun |miter_n in_multiplicand| ((state |miter_s|)) (_ BitVec 8) (|miter#5| state))
; yosys-smt2-assert 0 $auto$miter.cc:274:create_miter_equiv$106
(define-fun |miter_a 0| ((state |miter_s|)) Bool (or (|miter#2| state) (not true))) ; $auto$miter.cc:274:create_miter_equiv$106
(define-fun |miter_a| ((state |miter_s|)) Bool (and
  (|miter_a 0| state)
  (|optimized_a| (|miter_h gold| state))
  (|unoptimized_a| (|miter_h gate| state))
))
(define-fun |miter_u| ((state |miter_s|)) Bool (and
  (|optimized_u| (|miter_h gold| state))
  (|unoptimized_u| (|miter_h gate| state))
))
(define-fun |miter_i| ((state |miter_s|)) Bool (and
  (|optimized_i| (|miter_h gold| state))
  (|unoptimized_i| (|miter_h gate| state))
))
(define-fun |miter_h| ((state |miter_s|)) Bool (and
  (= (|miter_is| state) (|optimized_is| (|miter_h gold| state)))
  (= (|miter#0| state) (|optimized_n product| (|miter_h gold| state))) ; optimized.product
  (= (|miter#4| state) (|optimized_n multiplier| (|miter_h gold| state))) ; optimized.multiplier
  (= (|miter#5| state) (|optimized_n multiplicand| (|miter_h gold| state))) ; optimized.multiplicand
  (= (|miter_is| state) (|unoptimized_is| (|miter_h gate| state)))
  (= (|miter#1| state) (|unoptimized_n product| (|miter_h gate| state))) ; unoptimized.product
  (= (|miter#4| state) (|unoptimized_n multiplier| (|miter_h gate| state))) ; unoptimized.multiplier
  (= (|miter#5| state) (|unoptimized_n multiplicand| (|miter_h gate| state))) ; unoptimized.multiplicand
  (|optimized_h| (|miter_h gold| state))
  (|unoptimized_h| (|miter_h gate| state))
))
(define-fun |miter_t| ((state |miter_s|) (next_state |miter_s|)) Bool (and
  (|optimized_t| (|miter_h gold| state) (|miter_h gold| next_state))
  (|unoptimized_t| (|miter_h gate| state) (|miter_h gate| next_state))
)) ; end of module miter
; end of yosys output

(declare-const state |miter_s|)
(assert (|miter_h| state)) ; Hierarchy assertion
(assert (not (|miter_a| state))) ; Miter assertion failure - output of miter is true
(check-sat)
