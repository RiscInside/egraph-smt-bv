(set-logic QF_UFBV)

; SMT-LIBv2 description generated by Yosys 0.50+7 (git sha1 b0b53a22b, clang++ 18.1.8 -fPIC -O3)
; yosys-smt2-stbv
; yosys-smt2-module optimized
(define-sort |optimized_s| () (_ BitVec 7))
(define-fun |optimized_is| ((state |optimized_s|)) Bool (= ((_ extract 0 0) state) #b1))
(define-fun |optimized#0| ((state |optimized_s|)) (_ BitVec 4) ((_ extract 4 1) state)) ; \D
; yosys-smt2-input D 4
; yosys-smt2-witness {"offset": 0, "path": ["\\D"], "smtname": "D", "smtoffset": 0, "type": "input", "width": 4}
(define-fun |optimized_n D| ((state |optimized_s|)) (_ BitVec 4) (|optimized#0| state))
(define-fun |optimized#1| ((state |optimized_s|)) (_ BitVec 2) ((_ extract 6 5) state)) ; \sel
(define-fun |optimized#2| ((state |optimized_s|)) Bool (= (|optimized#1| state) #b10)) ; $eq$optimized.v:9$3_Y
(define-fun |optimized#3| ((state |optimized_s|)) (_ BitVec 1) (ite (|optimized#2| state) ((_ extract 2 2) (|optimized#0| state)) ((_ extract 3 3) (|optimized#0| state)))) ; $ternary$optimized.v:9$4_Y
(define-fun |optimized#4| ((state |optimized_s|)) Bool (= (|optimized#1| state) #b01)) ; $eq$optimized.v:8$2_Y
(define-fun |optimized#5| ((state |optimized_s|)) (_ BitVec 1) (ite (|optimized#4| state) ((_ extract 1 1) (|optimized#0| state)) (|optimized#3| state))) ; $ternary$optimized.v:8$5_Y
(define-fun |optimized#6| ((state |optimized_s|)) Bool (not (or  (= ((_ extract 0 0) (|optimized#1| state)) #b1) (= ((_ extract 1 1) (|optimized#1| state)) #b1)))) ; $eq$optimized.v:7$1_Y
(define-fun |optimized#7| ((state |optimized_s|)) (_ BitVec 1) (ite (|optimized#6| state) ((_ extract 0 0) (|optimized#0| state)) (|optimized#5| state))) ; \out
; yosys-smt2-output out 1
(define-fun |optimized_n out| ((state |optimized_s|)) Bool (= ((_ extract 0 0) (|optimized#7| state)) #b1))
; yosys-smt2-input sel 2
; yosys-smt2-witness {"offset": 0, "path": ["\\sel"], "smtname": "sel", "smtoffset": 0, "type": "input", "width": 2}
(define-fun |optimized_n sel| ((state |optimized_s|)) (_ BitVec 2) (|optimized#1| state))
(define-fun |optimized_a| ((state |optimized_s|)) Bool true)
(define-fun |optimized_u| ((state |optimized_s|)) Bool true)
(define-fun |optimized_i| ((state |optimized_s|)) Bool true)
(define-fun |optimized_h| ((state |optimized_s|)) Bool true)
(define-fun |optimized_t| ((state |optimized_s|) (next_state |optimized_s|)) Bool true) ; end of module optimized
; yosys-smt2-module mux2x1
(define-sort |mux2x1_s| () (_ BitVec 4))
(define-fun |mux2x1_is| ((state |mux2x1_s|)) Bool (= ((_ extract 0 0) state) #b1))
(define-fun |mux2x1#0| ((state |mux2x1_s|)) Bool (= ((_ extract 1 1) state) #b1)) ; \d0
; yosys-smt2-input d0 1
; yosys-smt2-witness {"offset": 0, "path": ["\\d0"], "smtname": "d0", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |mux2x1_n d0| ((state |mux2x1_s|)) Bool (|mux2x1#0| state))
(define-fun |mux2x1#1| ((state |mux2x1_s|)) Bool (= ((_ extract 2 2) state) #b1)) ; \d1
; yosys-smt2-input d1 1
; yosys-smt2-witness {"offset": 0, "path": ["\\d1"], "smtname": "d1", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |mux2x1_n d1| ((state |mux2x1_s|)) Bool (|mux2x1#1| state))
(define-fun |mux2x1#2| ((state |mux2x1_s|)) Bool (= ((_ extract 3 3) state) #b1)) ; \sel
; yosys-smt2-input sel 1
; yosys-smt2-witness {"offset": 0, "path": ["\\sel"], "smtname": "sel", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |mux2x1_n sel| ((state |mux2x1_s|)) Bool (|mux2x1#2| state))
(define-fun |mux2x1#3| ((state |mux2x1_s|)) (_ BitVec 1) (ite (|mux2x1#2| state) (ite (|mux2x1#1| state) #b1 #b0) (ite (|mux2x1#0| state) #b1 #b0))) ; \y
; yosys-smt2-output y 1
(define-fun |mux2x1_n y| ((state |mux2x1_s|)) Bool (= ((_ extract 0 0) (|mux2x1#3| state)) #b1))
(define-fun |mux2x1_a| ((state |mux2x1_s|)) Bool true)
(define-fun |mux2x1_u| ((state |mux2x1_s|)) Bool true)
(define-fun |mux2x1_i| ((state |mux2x1_s|)) Bool true)
(define-fun |mux2x1_h| ((state |mux2x1_s|)) Bool true)
(define-fun |mux2x1_t| ((state |mux2x1_s|) (next_state |mux2x1_s|)) Bool true) ; end of module mux2x1
; yosys-smt2-module unoptimized
(define-sort |unoptimized_s| () (_ BitVec 22))
(define-fun |unoptimized_is| ((state |unoptimized_s|)) Bool (= ((_ extract 0 0) state) #b1))
(define-fun |unoptimized#0| ((state |unoptimized_s|)) (_ BitVec 4) ((_ extract 4 1) state)) ; \D
; yosys-smt2-input D 4
; yosys-smt2-witness {"offset": 0, "path": ["\\D"], "smtname": "D", "smtoffset": 0, "type": "input", "width": 4}
(define-fun |unoptimized_n D| ((state |unoptimized_s|)) (_ BitVec 4) (|unoptimized#0| state))
; yosys-smt2-cell mux2x1 mux3
; yosys-smt2-witness {"path": ["\\mux3"], "smtname": "mux3", "type": "cell"}
(define-fun |unoptimized#1| ((state |unoptimized_s|)) Bool (= ((_ extract 5 5) state) #b1)) ; \out
(define-fun |unoptimized_h mux3| ((state |unoptimized_s|)) (_ BitVec 4) ((_ extract 9 6) state))
; yosys-smt2-output out 1
(define-fun |unoptimized_n out| ((state |unoptimized_s|)) Bool (|unoptimized#1| state))
(define-fun |unoptimized#2| ((state |unoptimized_s|)) (_ BitVec 2) ((_ extract 11 10) state)) ; \sel
; yosys-smt2-input sel 2
; yosys-smt2-witness {"offset": 0, "path": ["\\sel"], "smtname": "sel", "smtoffset": 0, "type": "input", "width": 2}
(define-fun |unoptimized_n sel| ((state |unoptimized_s|)) (_ BitVec 2) (|unoptimized#2| state))
; yosys-smt2-cell mux2x1 mux1
; yosys-smt2-witness {"path": ["\\mux1"], "smtname": "mux1", "type": "cell"}
(define-fun |unoptimized#3| ((state |unoptimized_s|)) Bool (= ((_ extract 12 12) state) #b1)) ; \sel1_out
(define-fun |unoptimized_h mux1| ((state |unoptimized_s|)) (_ BitVec 4) ((_ extract 16 13) state))
; yosys-smt2-cell mux2x1 mux2
; yosys-smt2-witness {"path": ["\\mux2"], "smtname": "mux2", "type": "cell"}
(define-fun |unoptimized#4| ((state |unoptimized_s|)) Bool (= ((_ extract 17 17) state) #b1)) ; \sel2_out
(define-fun |unoptimized_h mux2| ((state |unoptimized_s|)) (_ BitVec 4) ((_ extract 21 18) state))
(define-fun |unoptimized_a| ((state |unoptimized_s|)) Bool (and
  (|mux2x1_a| (|unoptimized_h mux1| state))
  (|mux2x1_a| (|unoptimized_h mux2| state))
  (|mux2x1_a| (|unoptimized_h mux3| state))
))
(define-fun |unoptimized_u| ((state |unoptimized_s|)) Bool (and
  (|mux2x1_u| (|unoptimized_h mux1| state))
  (|mux2x1_u| (|unoptimized_h mux2| state))
  (|mux2x1_u| (|unoptimized_h mux3| state))
))
(define-fun |unoptimized_i| ((state |unoptimized_s|)) Bool (and
  (|mux2x1_i| (|unoptimized_h mux1| state))
  (|mux2x1_i| (|unoptimized_h mux2| state))
  (|mux2x1_i| (|unoptimized_h mux3| state))
))
(define-fun |unoptimized_h| ((state |unoptimized_s|)) Bool (and
  (= (|unoptimized_is| state) (|mux2x1_is| (|unoptimized_h mux1| state)))
  (= (= ((_ extract 0 0) (|unoptimized#0| state)) #b1) (|mux2x1_n d0| (|unoptimized_h mux1| state))) ; mux2x1.d0
  (= (= ((_ extract 1 1) (|unoptimized#0| state)) #b1) (|mux2x1_n d1| (|unoptimized_h mux1| state))) ; mux2x1.d1
  (= (= ((_ extract 0 0) (|unoptimized#2| state)) #b1) (|mux2x1_n sel| (|unoptimized_h mux1| state))) ; mux2x1.sel
  (= (|unoptimized#3| state) (|mux2x1_n y| (|unoptimized_h mux1| state))) ; mux2x1.y
  (= (|unoptimized_is| state) (|mux2x1_is| (|unoptimized_h mux2| state)))
  (= (= ((_ extract 2 2) (|unoptimized#0| state)) #b1) (|mux2x1_n d0| (|unoptimized_h mux2| state))) ; mux2x1.d0
  (= (= ((_ extract 3 3) (|unoptimized#0| state)) #b1) (|mux2x1_n d1| (|unoptimized_h mux2| state))) ; mux2x1.d1
  (= (= ((_ extract 0 0) (|unoptimized#2| state)) #b1) (|mux2x1_n sel| (|unoptimized_h mux2| state))) ; mux2x1.sel
  (= (|unoptimized#4| state) (|mux2x1_n y| (|unoptimized_h mux2| state))) ; mux2x1.y
  (= (|unoptimized_is| state) (|mux2x1_is| (|unoptimized_h mux3| state)))
  (= (|unoptimized#3| state) (|mux2x1_n d0| (|unoptimized_h mux3| state))) ; mux2x1.d0
  (= (|unoptimized#4| state) (|mux2x1_n d1| (|unoptimized_h mux3| state))) ; mux2x1.d1
  (= (= ((_ extract 1 1) (|unoptimized#2| state)) #b1) (|mux2x1_n sel| (|unoptimized_h mux3| state))) ; mux2x1.sel
  (= (|unoptimized#1| state) (|mux2x1_n y| (|unoptimized_h mux3| state))) ; mux2x1.y
  (|mux2x1_h| (|unoptimized_h mux1| state))
  (|mux2x1_h| (|unoptimized_h mux2| state))
  (|mux2x1_h| (|unoptimized_h mux3| state))
))
(define-fun |unoptimized_t| ((state |unoptimized_s|) (next_state |unoptimized_s|)) Bool (and
  (|mux2x1_t| (|unoptimized_h mux1| state) (|unoptimized_h mux1| next_state))
  (|mux2x1_t| (|unoptimized_h mux2| state) (|unoptimized_h mux2| next_state))
  (|mux2x1_t| (|unoptimized_h mux3| state) (|unoptimized_h mux3| next_state))
)) ; end of module unoptimized
; yosys-smt2-module miter
(define-sort |miter_s| () (_ BitVec 38))
(define-fun |miter_is| ((state |miter_s|)) Bool (= ((_ extract 0 0) state) #b1))
; yosys-smt2-cell optimized gold
; yosys-smt2-witness {"path": ["\\gold"], "smtname": "gold", "type": "cell"}
(define-fun |miter#0| ((state |miter_s|)) Bool (= ((_ extract 1 1) state) #b1)) ; \gold_out
(define-fun |miter_h gold| ((state |miter_s|)) (_ BitVec 7) ((_ extract 8 2) state))
; yosys-smt2-cell unoptimized gate
; yosys-smt2-witness {"path": ["\\gate"], "smtname": "gate", "type": "cell"}
(define-fun |miter#1| ((state |miter_s|)) Bool (= ((_ extract 9 9) state) #b1)) ; \gate_out
(define-fun |miter_h gate| ((state |miter_s|)) (_ BitVec 22) ((_ extract 31 10) state))
(define-fun |miter#2| ((state |miter_s|)) Bool (= (ite (|miter#0| state) #b1 #b0) (ite (|miter#1| state) #b1 #b0))) ; $auto$miter.cc:242:create_miter_equiv$9
(define-fun |miter#3| ((state |miter_s|)) (_ BitVec 1) (bvnot (ite (|miter#2| state) #b1 #b0))) ; \trigger
; yosys-smt2-output trigger 1
(define-fun |miter_n trigger| ((state |miter_s|)) Bool (= ((_ extract 0 0) (|miter#3| state)) #b1))
(define-fun |miter#4| ((state |miter_s|)) (_ BitVec 2) ((_ extract 33 32) state)) ; \in_sel
; yosys-smt2-input in_sel 2
; yosys-smt2-witness {"offset": 0, "path": ["\\in_sel"], "smtname": "in_sel", "smtoffset": 0, "type": "input", "width": 2}
(define-fun |miter_n in_sel| ((state |miter_s|)) (_ BitVec 2) (|miter#4| state))
(define-fun |miter#5| ((state |miter_s|)) (_ BitVec 4) ((_ extract 37 34) state)) ; \in_D
; yosys-smt2-input in_D 4
; yosys-smt2-witness {"offset": 0, "path": ["\\in_D"], "smtname": "in_D", "smtoffset": 0, "type": "input", "width": 4}
(define-fun |miter_n in_D| ((state |miter_s|)) (_ BitVec 4) (|miter#5| state))
; yosys-smt2-assert 0 $auto$miter.cc:274:create_miter_equiv$10
(define-fun |miter_a 0| ((state |miter_s|)) Bool (or (|miter#2| state) (not true))) ; $auto$miter.cc:274:create_miter_equiv$10
(define-fun |miter_a| ((state |miter_s|)) Bool (and
  (|miter_a 0| state)
  (|optimized_a| (|miter_h gold| state))
  (|unoptimized_a| (|miter_h gate| state))
))
(define-fun |miter_u| ((state |miter_s|)) Bool (and
  (|optimized_u| (|miter_h gold| state))
  (|unoptimized_u| (|miter_h gate| state))
))
(define-fun |miter_i| ((state |miter_s|)) Bool (and
  (|optimized_i| (|miter_h gold| state))
  (|unoptimized_i| (|miter_h gate| state))
))
(define-fun |miter_h| ((state |miter_s|)) Bool (and
  (= (|miter_is| state) (|optimized_is| (|miter_h gold| state)))
  (= (|miter#4| state) (|optimized_n sel| (|miter_h gold| state))) ; optimized.sel
  (= (|miter#0| state) (|optimized_n out| (|miter_h gold| state))) ; optimized.out
  (= (|miter#5| state) (|optimized_n D| (|miter_h gold| state))) ; optimized.D
  (= (|miter_is| state) (|unoptimized_is| (|miter_h gate| state)))
  (= (|miter#4| state) (|unoptimized_n sel| (|miter_h gate| state))) ; unoptimized.sel
  (= (|miter#1| state) (|unoptimized_n out| (|miter_h gate| state))) ; unoptimized.out
  (= (|miter#5| state) (|unoptimized_n D| (|miter_h gate| state))) ; unoptimized.D
  (|optimized_h| (|miter_h gold| state))
  (|unoptimized_h| (|miter_h gate| state))
))
(define-fun |miter_t| ((state |miter_s|) (next_state |miter_s|)) Bool (and
  (|optimized_t| (|miter_h gold| state) (|miter_h gold| next_state))
  (|unoptimized_t| (|miter_h gate| state) (|miter_h gate| next_state))
)) ; end of module miter
; end of yosys output

(declare-const state |miter_s|)
(assert (|miter_h| state)) ; Hierarchy assertion
(assert (not (|miter_a| state))) ; Miter assertion failure - output of miter is true
(check-sat)
