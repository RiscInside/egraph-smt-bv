(set-logic QF_UFBV)

; SMT-LIBv2 description generated by Yosys 0.50+7 (git sha1 b0b53a22b, clang++ 18.1.8 -fPIC -O3)
; yosys-smt2-stbv
; yosys-smt2-module optimized_mux2to1
(define-sort |optimized_mux2to1_s| () (_ BitVec 4))
(define-fun |optimized_mux2to1_is| ((state |optimized_mux2to1_s|)) Bool (= ((_ extract 0 0) state) #b1))
(define-fun |optimized_mux2to1#0| ((state |optimized_mux2to1_s|)) Bool (= ((_ extract 1 1) state) #b1)) ; \in0
; yosys-smt2-input in0 1
; yosys-smt2-witness {"offset": 0, "path": ["\\in0"], "smtname": "in0", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |optimized_mux2to1_n in0| ((state |optimized_mux2to1_s|)) Bool (|optimized_mux2to1#0| state))
(define-fun |optimized_mux2to1#1| ((state |optimized_mux2to1_s|)) Bool (= ((_ extract 2 2) state) #b1)) ; \in1
; yosys-smt2-input in1 1
; yosys-smt2-witness {"offset": 0, "path": ["\\in1"], "smtname": "in1", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |optimized_mux2to1_n in1| ((state |optimized_mux2to1_s|)) Bool (|optimized_mux2to1#1| state))
(define-fun |optimized_mux2to1#2| ((state |optimized_mux2to1_s|)) (_ BitVec 1) ((_ extract 3 3) state)) ; \sel
(define-fun |optimized_mux2to1#3| ((state |optimized_mux2to1_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|optimized_mux2to1#2| state)) #b1) (ite (|optimized_mux2to1#1| state) #b1 #b0) (ite (|optimized_mux2to1#0| state) #b1 #b0))) ; $ternary$optimized.v:19$3_Y
; yosys-smt2-output out 1
(define-fun |optimized_mux2to1_n out| ((state |optimized_mux2to1_s|)) Bool (= ((_ extract 0 0) (|optimized_mux2to1#3| state)) #b1))
; yosys-smt2-input sel 1
; yosys-smt2-witness {"offset": 0, "path": ["\\sel"], "smtname": "sel", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |optimized_mux2to1_n sel| ((state |optimized_mux2to1_s|)) Bool (= ((_ extract 0 0) (|optimized_mux2to1#2| state)) #b1))
(define-fun |optimized_mux2to1_a| ((state |optimized_mux2to1_s|)) Bool true)
(define-fun |optimized_mux2to1_u| ((state |optimized_mux2to1_s|)) Bool true)
(define-fun |optimized_mux2to1_i| ((state |optimized_mux2to1_s|)) Bool true)
(define-fun |optimized_mux2to1_h| ((state |optimized_mux2to1_s|)) Bool true)
(define-fun |optimized_mux2to1_t| ((state |optimized_mux2to1_s|) (next_state |optimized_mux2to1_s|)) Bool true) ; end of module optimized_mux2to1
; yosys-smt2-module optimized_simple_cal
(define-sort |optimized_simple_cal_s| () (_ BitVec 2))
(define-fun |optimized_simple_cal_is| ((state |optimized_simple_cal_s|)) Bool (= ((_ extract 0 0) state) #b1))
(define-fun |optimized_simple_cal#0| ((state |optimized_simple_cal_s|)) Bool (= ((_ extract 1 1) state) #b1)) ; \in
; yosys-smt2-input in 1
; yosys-smt2-witness {"offset": 0, "path": ["\\in"], "smtname": "in", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |optimized_simple_cal_n in| ((state |optimized_simple_cal_s|)) Bool (|optimized_simple_cal#0| state))
(define-fun |optimized_simple_cal#1| ((state |optimized_simple_cal_s|)) (_ BitVec 32) (bvadd (concat #b00000000000000000000000000000 (concat (ite (|optimized_simple_cal#0| state) #b1 #b0) #b00)) #b00000000000000000000000000000001)) ; $add$optimized.v:29$6_Y
; yosys-smt2-output out 1
(define-fun |optimized_simple_cal_n out| ((state |optimized_simple_cal_s|)) Bool (= ((_ extract 0 0) (|optimized_simple_cal#1| state)) #b1))
(define-fun |optimized_simple_cal_a| ((state |optimized_simple_cal_s|)) Bool true)
(define-fun |optimized_simple_cal_u| ((state |optimized_simple_cal_s|)) Bool true)
(define-fun |optimized_simple_cal_i| ((state |optimized_simple_cal_s|)) Bool true)
(define-fun |optimized_simple_cal_h| ((state |optimized_simple_cal_s|)) Bool true)
(define-fun |optimized_simple_cal_t| ((state |optimized_simple_cal_s|) (next_state |optimized_simple_cal_s|)) Bool true) ; end of module optimized_simple_cal
; yosys-smt2-module mux2to1
(define-sort |mux2to1_s| () (_ BitVec 4))
(define-fun |mux2to1_is| ((state |mux2to1_s|)) Bool (= ((_ extract 0 0) state) #b1))
(define-fun |mux2to1#0| ((state |mux2to1_s|)) Bool (= ((_ extract 1 1) state) #b1)) ; \in0
; yosys-smt2-input in0 1
; yosys-smt2-witness {"offset": 0, "path": ["\\in0"], "smtname": "in0", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |mux2to1_n in0| ((state |mux2to1_s|)) Bool (|mux2to1#0| state))
(define-fun |mux2to1#1| ((state |mux2to1_s|)) Bool (= ((_ extract 2 2) state) #b1)) ; \in1
; yosys-smt2-input in1 1
; yosys-smt2-witness {"offset": 0, "path": ["\\in1"], "smtname": "in1", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |mux2to1_n in1| ((state |mux2to1_s|)) Bool (|mux2to1#1| state))
(define-fun |mux2to1#2| ((state |mux2to1_s|)) (_ BitVec 1) ((_ extract 3 3) state)) ; \sel
(define-fun |mux2to1#3| ((state |mux2to1_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|mux2to1#2| state)) #b1) (ite (|mux2to1#1| state) #b1 #b0) (ite (|mux2to1#0| state) #b1 #b0))) ; $ternary$unoptimized.v:19$8_Y
; yosys-smt2-output out 1
(define-fun |mux2to1_n out| ((state |mux2to1_s|)) Bool (= ((_ extract 0 0) (|mux2to1#3| state)) #b1))
; yosys-smt2-input sel 1
; yosys-smt2-witness {"offset": 0, "path": ["\\sel"], "smtname": "sel", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |mux2to1_n sel| ((state |mux2to1_s|)) Bool (= ((_ extract 0 0) (|mux2to1#2| state)) #b1))
(define-fun |mux2to1_a| ((state |mux2to1_s|)) Bool true)
(define-fun |mux2to1_u| ((state |mux2to1_s|)) Bool true)
(define-fun |mux2to1_i| ((state |mux2to1_s|)) Bool true)
(define-fun |mux2to1_h| ((state |mux2to1_s|)) Bool true)
(define-fun |mux2to1_t| ((state |mux2to1_s|) (next_state |mux2to1_s|)) Bool true) ; end of module mux2to1
; yosys-smt2-module simple_cal
(define-sort |simple_cal_s| () (_ BitVec 2))
(define-fun |simple_cal_is| ((state |simple_cal_s|)) Bool (= ((_ extract 0 0) state) #b1))
(define-fun |simple_cal#0| ((state |simple_cal_s|)) Bool (= ((_ extract 1 1) state) #b1)) ; \in
; yosys-smt2-input in 1
; yosys-smt2-witness {"offset": 0, "path": ["\\in"], "smtname": "in", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |simple_cal_n in| ((state |simple_cal_s|)) Bool (|simple_cal#0| state))
(define-fun |simple_cal#1| ((state |simple_cal_s|)) (_ BitVec 32) (bvadd (concat #b00000000000000000000000000000 (concat (ite (|simple_cal#0| state) #b1 #b0) #b00)) #b00000000000000000000000000000001)) ; $add$unoptimized.v:29$11_Y
; yosys-smt2-output out 1
(define-fun |simple_cal_n out| ((state |simple_cal_s|)) Bool (= ((_ extract 0 0) (|simple_cal#1| state)) #b1))
(define-fun |simple_cal_a| ((state |simple_cal_s|)) Bool true)
(define-fun |simple_cal_u| ((state |simple_cal_s|)) Bool true)
(define-fun |simple_cal_i| ((state |simple_cal_s|)) Bool true)
(define-fun |simple_cal_h| ((state |simple_cal_s|)) Bool true)
(define-fun |simple_cal_t| ((state |simple_cal_s|) (next_state |simple_cal_s|)) Bool true) ; end of module simple_cal
; yosys-smt2-module improve_mux2to1
(define-sort |improve_mux2to1_s| () (_ BitVec 4))
(define-fun |improve_mux2to1_is| ((state |improve_mux2to1_s|)) Bool (= ((_ extract 0 0) state) #b1))
(define-fun |improve_mux2to1#0| ((state |improve_mux2to1_s|)) Bool (= ((_ extract 1 1) state) #b1)) ; \in0
; yosys-smt2-input in0 1
; yosys-smt2-witness {"offset": 0, "path": ["\\in0"], "smtname": "in0", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |improve_mux2to1_n in0| ((state |improve_mux2to1_s|)) Bool (|improve_mux2to1#0| state))
(define-fun |improve_mux2to1#1| ((state |improve_mux2to1_s|)) Bool (= ((_ extract 2 2) state) #b1)) ; \in1
; yosys-smt2-input in1 1
; yosys-smt2-witness {"offset": 0, "path": ["\\in1"], "smtname": "in1", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |improve_mux2to1_n in1| ((state |improve_mux2to1_s|)) Bool (|improve_mux2to1#1| state))
(define-fun |improve_mux2to1#2| ((state |improve_mux2to1_s|)) (_ BitVec 1) ((_ extract 3 3) state)) ; \sel
(define-fun |improve_mux2to1#3| ((state |improve_mux2to1_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|improve_mux2to1#2| state)) #b1) (ite (|improve_mux2to1#1| state) #b1 #b0) (ite (|improve_mux2to1#0| state) #b1 #b0))) ; $ternary$improve.v:19$14_Y
; yosys-smt2-output out 1
(define-fun |improve_mux2to1_n out| ((state |improve_mux2to1_s|)) Bool (= ((_ extract 0 0) (|improve_mux2to1#3| state)) #b1))
; yosys-smt2-input sel 1
; yosys-smt2-witness {"offset": 0, "path": ["\\sel"], "smtname": "sel", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |improve_mux2to1_n sel| ((state |improve_mux2to1_s|)) Bool (= ((_ extract 0 0) (|improve_mux2to1#2| state)) #b1))
(define-fun |improve_mux2to1_a| ((state |improve_mux2to1_s|)) Bool true)
(define-fun |improve_mux2to1_u| ((state |improve_mux2to1_s|)) Bool true)
(define-fun |improve_mux2to1_i| ((state |improve_mux2to1_s|)) Bool true)
(define-fun |improve_mux2to1_h| ((state |improve_mux2to1_s|)) Bool true)
(define-fun |improve_mux2to1_t| ((state |improve_mux2to1_s|) (next_state |improve_mux2to1_s|)) Bool true) ; end of module improve_mux2to1
; yosys-smt2-module improve_simple_cal
(define-sort |improve_simple_cal_s| () (_ BitVec 2))
(define-fun |improve_simple_cal_is| ((state |improve_simple_cal_s|)) Bool (= ((_ extract 0 0) state) #b1))
(define-fun |improve_simple_cal#0| ((state |improve_simple_cal_s|)) Bool (= ((_ extract 1 1) state) #b1)) ; \in
; yosys-smt2-input in 1
; yosys-smt2-witness {"offset": 0, "path": ["\\in"], "smtname": "in", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |improve_simple_cal_n in| ((state |improve_simple_cal_s|)) Bool (|improve_simple_cal#0| state))
(define-fun |improve_simple_cal#1| ((state |improve_simple_cal_s|)) (_ BitVec 32) (bvadd (concat #b00000000000000000000000000000 (concat (ite (|improve_simple_cal#0| state) #b1 #b0) #b00)) #b00000000000000000000000000000001)) ; $add$improve.v:29$17_Y
; yosys-smt2-output out 1
(define-fun |improve_simple_cal_n out| ((state |improve_simple_cal_s|)) Bool (= ((_ extract 0 0) (|improve_simple_cal#1| state)) #b1))
(define-fun |improve_simple_cal_a| ((state |improve_simple_cal_s|)) Bool true)
(define-fun |improve_simple_cal_u| ((state |improve_simple_cal_s|)) Bool true)
(define-fun |improve_simple_cal_i| ((state |improve_simple_cal_s|)) Bool true)
(define-fun |improve_simple_cal_h| ((state |improve_simple_cal_s|)) Bool true)
(define-fun |improve_simple_cal_t| ((state |improve_simple_cal_s|) (next_state |improve_simple_cal_s|)) Bool true) ; end of module improve_simple_cal
; yosys-smt2-module improve
(define-sort |improve_s| () (_ BitVec 11))
(define-fun |improve_is| ((state |improve_s|)) Bool (= ((_ extract 0 0) state) #b1))
(define-fun |improve#0| ((state |improve_s|)) Bool (= ((_ extract 1 1) state) #b1)) ; \a
; yosys-smt2-input a 1
; yosys-smt2-witness {"offset": 0, "path": ["\\a"], "smtname": "a", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |improve_n a| ((state |improve_s|)) Bool (|improve#0| state))
(define-fun |improve#1| ((state |improve_s|)) Bool (= ((_ extract 2 2) state) #b1)) ; \b
; yosys-smt2-input b 1
; yosys-smt2-witness {"offset": 0, "path": ["\\b"], "smtname": "b", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |improve_n b| ((state |improve_s|)) Bool (|improve#1| state))
; yosys-smt2-cell improve_mux2to1 mux0
; yosys-smt2-witness {"path": ["\\mux0"], "smtname": "mux0", "type": "cell"}
(define-fun |improve#2| ((state |improve_s|)) Bool (= ((_ extract 3 3) state) #b1)) ; \y
(define-fun |improve_h mux0| ((state |improve_s|)) (_ BitVec 4) ((_ extract 7 4) state))
; yosys-smt2-output y 1
(define-fun |improve_n y| ((state |improve_s|)) Bool (|improve#2| state))
; yosys-smt2-cell improve_simple_cal cal0
; yosys-smt2-witness {"path": ["\\cal0"], "smtname": "cal0", "type": "cell"}
(define-fun |improve#3| ((state |improve_s|)) Bool (= ((_ extract 8 8) state) #b1)) ; \x
(define-fun |improve_h cal0| ((state |improve_s|)) (_ BitVec 2) ((_ extract 10 9) state))
(define-fun |improve_a| ((state |improve_s|)) Bool (and
  (|improve_simple_cal_a| (|improve_h cal0| state))
  (|improve_mux2to1_a| (|improve_h mux0| state))
))
(define-fun |improve_u| ((state |improve_s|)) Bool (and
  (|improve_simple_cal_u| (|improve_h cal0| state))
  (|improve_mux2to1_u| (|improve_h mux0| state))
))
(define-fun |improve_i| ((state |improve_s|)) Bool (and
  (|improve_simple_cal_i| (|improve_h cal0| state))
  (|improve_mux2to1_i| (|improve_h mux0| state))
))
(define-fun |improve_h| ((state |improve_s|)) Bool (and
  (= (|improve_is| state) (|improve_simple_cal_is| (|improve_h cal0| state)))
  (= true (|improve_simple_cal_n in| (|improve_h cal0| state))) ; improve_simple_cal.in
  (= (|improve#3| state) (|improve_simple_cal_n out| (|improve_h cal0| state))) ; improve_simple_cal.out
  (= (|improve_is| state) (|improve_mux2to1_is| (|improve_h mux0| state)))
  (= (|improve#0| state) (|improve_mux2to1_n in0| (|improve_h mux0| state))) ; improve_mux2to1.in0
  (= (|improve#3| state) (|improve_mux2to1_n in1| (|improve_h mux0| state))) ; improve_mux2to1.in1
  (= (|improve#2| state) (|improve_mux2to1_n out| (|improve_h mux0| state))) ; improve_mux2to1.out
  (= (|improve#1| state) (|improve_mux2to1_n sel| (|improve_h mux0| state))) ; improve_mux2to1.sel
  (|improve_simple_cal_h| (|improve_h cal0| state))
  (|improve_mux2to1_h| (|improve_h mux0| state))
))
(define-fun |improve_t| ((state |improve_s|) (next_state |improve_s|)) Bool (and
  (|improve_simple_cal_t| (|improve_h cal0| state) (|improve_h cal0| next_state))
  (|improve_mux2to1_t| (|improve_h mux0| state) (|improve_h mux0| next_state))
)) ; end of module improve
; yosys-smt2-module optimized
(define-sort |optimized_s| () (_ BitVec 11))
(define-fun |optimized_is| ((state |optimized_s|)) Bool (= ((_ extract 0 0) state) #b1))
(define-fun |optimized#0| ((state |optimized_s|)) Bool (= ((_ extract 1 1) state) #b1)) ; \a
; yosys-smt2-input a 1
; yosys-smt2-witness {"offset": 0, "path": ["\\a"], "smtname": "a", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |optimized_n a| ((state |optimized_s|)) Bool (|optimized#0| state))
(define-fun |optimized#1| ((state |optimized_s|)) Bool (= ((_ extract 2 2) state) #b1)) ; \b
; yosys-smt2-input b 1
; yosys-smt2-witness {"offset": 0, "path": ["\\b"], "smtname": "b", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |optimized_n b| ((state |optimized_s|)) Bool (|optimized#1| state))
; yosys-smt2-cell optimized_mux2to1 mux0
; yosys-smt2-witness {"path": ["\\mux0"], "smtname": "mux0", "type": "cell"}
(define-fun |optimized#2| ((state |optimized_s|)) Bool (= ((_ extract 3 3) state) #b1)) ; \y
(define-fun |optimized_h mux0| ((state |optimized_s|)) (_ BitVec 4) ((_ extract 7 4) state))
; yosys-smt2-output y 1
(define-fun |optimized_n y| ((state |optimized_s|)) Bool (|optimized#2| state))
; yosys-smt2-cell optimized_simple_cal cal0
; yosys-smt2-witness {"path": ["\\cal0"], "smtname": "cal0", "type": "cell"}
(define-fun |optimized#3| ((state |optimized_s|)) Bool (= ((_ extract 8 8) state) #b1)) ; \x
(define-fun |optimized_h cal0| ((state |optimized_s|)) (_ BitVec 2) ((_ extract 10 9) state))
(define-fun |optimized_a| ((state |optimized_s|)) Bool (and
  (|optimized_simple_cal_a| (|optimized_h cal0| state))
  (|optimized_mux2to1_a| (|optimized_h mux0| state))
))
(define-fun |optimized_u| ((state |optimized_s|)) Bool (and
  (|optimized_simple_cal_u| (|optimized_h cal0| state))
  (|optimized_mux2to1_u| (|optimized_h mux0| state))
))
(define-fun |optimized_i| ((state |optimized_s|)) Bool (and
  (|optimized_simple_cal_i| (|optimized_h cal0| state))
  (|optimized_mux2to1_i| (|optimized_h mux0| state))
))
(define-fun |optimized_h| ((state |optimized_s|)) Bool (and
  (= (|optimized_is| state) (|optimized_simple_cal_is| (|optimized_h cal0| state)))
  (= true (|optimized_simple_cal_n in| (|optimized_h cal0| state))) ; optimized_simple_cal.in
  (= (|optimized#3| state) (|optimized_simple_cal_n out| (|optimized_h cal0| state))) ; optimized_simple_cal.out
  (= (|optimized_is| state) (|optimized_mux2to1_is| (|optimized_h mux0| state)))
  (= (|optimized#0| state) (|optimized_mux2to1_n in0| (|optimized_h mux0| state))) ; optimized_mux2to1.in0
  (= (|optimized#3| state) (|optimized_mux2to1_n in1| (|optimized_h mux0| state))) ; optimized_mux2to1.in1
  (= (|optimized#2| state) (|optimized_mux2to1_n out| (|optimized_h mux0| state))) ; optimized_mux2to1.out
  (= (|optimized#1| state) (|optimized_mux2to1_n sel| (|optimized_h mux0| state))) ; optimized_mux2to1.sel
  (|optimized_simple_cal_h| (|optimized_h cal0| state))
  (|optimized_mux2to1_h| (|optimized_h mux0| state))
))
(define-fun |optimized_t| ((state |optimized_s|) (next_state |optimized_s|)) Bool (and
  (|optimized_simple_cal_t| (|optimized_h cal0| state) (|optimized_h cal0| next_state))
  (|optimized_mux2to1_t| (|optimized_h mux0| state) (|optimized_h mux0| next_state))
)) ; end of module optimized
; yosys-smt2-module unoptimized
(define-sort |unoptimized_s| () (_ BitVec 11))
(define-fun |unoptimized_is| ((state |unoptimized_s|)) Bool (= ((_ extract 0 0) state) #b1))
(define-fun |unoptimized#0| ((state |unoptimized_s|)) Bool (= ((_ extract 1 1) state) #b1)) ; \a
; yosys-smt2-input a 1
; yosys-smt2-witness {"offset": 0, "path": ["\\a"], "smtname": "a", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |unoptimized_n a| ((state |unoptimized_s|)) Bool (|unoptimized#0| state))
(define-fun |unoptimized#1| ((state |unoptimized_s|)) Bool (= ((_ extract 2 2) state) #b1)) ; \b
; yosys-smt2-input b 1
; yosys-smt2-witness {"offset": 0, "path": ["\\b"], "smtname": "b", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |unoptimized_n b| ((state |unoptimized_s|)) Bool (|unoptimized#1| state))
; yosys-smt2-cell mux2to1 mux0
; yosys-smt2-witness {"path": ["\\mux0"], "smtname": "mux0", "type": "cell"}
(define-fun |unoptimized#2| ((state |unoptimized_s|)) Bool (= ((_ extract 3 3) state) #b1)) ; \y
(define-fun |unoptimized_h mux0| ((state |unoptimized_s|)) (_ BitVec 4) ((_ extract 7 4) state))
; yosys-smt2-output y 1
(define-fun |unoptimized_n y| ((state |unoptimized_s|)) Bool (|unoptimized#2| state))
; yosys-smt2-cell simple_cal cal0
; yosys-smt2-witness {"path": ["\\cal0"], "smtname": "cal0", "type": "cell"}
(define-fun |unoptimized#3| ((state |unoptimized_s|)) Bool (= ((_ extract 8 8) state) #b1)) ; \x
(define-fun |unoptimized_h cal0| ((state |unoptimized_s|)) (_ BitVec 2) ((_ extract 10 9) state))
(define-fun |unoptimized_a| ((state |unoptimized_s|)) Bool (and
  (|simple_cal_a| (|unoptimized_h cal0| state))
  (|mux2to1_a| (|unoptimized_h mux0| state))
))
(define-fun |unoptimized_u| ((state |unoptimized_s|)) Bool (and
  (|simple_cal_u| (|unoptimized_h cal0| state))
  (|mux2to1_u| (|unoptimized_h mux0| state))
))
(define-fun |unoptimized_i| ((state |unoptimized_s|)) Bool (and
  (|simple_cal_i| (|unoptimized_h cal0| state))
  (|mux2to1_i| (|unoptimized_h mux0| state))
))
(define-fun |unoptimized_h| ((state |unoptimized_s|)) Bool (and
  (= (|unoptimized_is| state) (|simple_cal_is| (|unoptimized_h cal0| state)))
  (= (|unoptimized#1| state) (|simple_cal_n in| (|unoptimized_h cal0| state))) ; simple_cal.in
  (= (|unoptimized#3| state) (|simple_cal_n out| (|unoptimized_h cal0| state))) ; simple_cal.out
  (= (|unoptimized_is| state) (|mux2to1_is| (|unoptimized_h mux0| state)))
  (= (|unoptimized#0| state) (|mux2to1_n in0| (|unoptimized_h mux0| state))) ; mux2to1.in0
  (= (|unoptimized#3| state) (|mux2to1_n in1| (|unoptimized_h mux0| state))) ; mux2to1.in1
  (= (|unoptimized#2| state) (|mux2to1_n out| (|unoptimized_h mux0| state))) ; mux2to1.out
  (= (|unoptimized#1| state) (|mux2to1_n sel| (|unoptimized_h mux0| state))) ; mux2to1.sel
  (|simple_cal_h| (|unoptimized_h cal0| state))
  (|mux2to1_h| (|unoptimized_h mux0| state))
))
(define-fun |unoptimized_t| ((state |unoptimized_s|) (next_state |unoptimized_s|)) Bool (and
  (|simple_cal_t| (|unoptimized_h cal0| state) (|unoptimized_h cal0| next_state))
  (|mux2to1_t| (|unoptimized_h mux0| state) (|unoptimized_h mux0| next_state))
)) ; end of module unoptimized
; yosys-smt2-module miter1
(define-sort |miter1_s| () (_ BitVec 27))
(define-fun |miter1_is| ((state |miter1_s|)) Bool (= ((_ extract 0 0) state) #b1))
; yosys-smt2-cell optimized gold
; yosys-smt2-witness {"path": ["\\gold"], "smtname": "gold", "type": "cell"}
(define-fun |miter1#0| ((state |miter1_s|)) Bool (= ((_ extract 1 1) state) #b1)) ; \gold_y
(define-fun |miter1_h gold| ((state |miter1_s|)) (_ BitVec 11) ((_ extract 12 2) state))
; yosys-smt2-cell unoptimized gate
; yosys-smt2-witness {"path": ["\\gate"], "smtname": "gate", "type": "cell"}
(define-fun |miter1#1| ((state |miter1_s|)) Bool (= ((_ extract 13 13) state) #b1)) ; \gate_y
(define-fun |miter1_h gate| ((state |miter1_s|)) (_ BitVec 11) ((_ extract 24 14) state))
(define-fun |miter1#2| ((state |miter1_s|)) Bool (= (ite (|miter1#0| state) #b1 #b0) (ite (|miter1#1| state) #b1 #b0))) ; $auto$miter.cc:242:create_miter_equiv$19
(define-fun |miter1#3| ((state |miter1_s|)) (_ BitVec 1) (bvnot (ite (|miter1#2| state) #b1 #b0))) ; \trigger
; yosys-smt2-output trigger 1
(define-fun |miter1_n trigger| ((state |miter1_s|)) Bool (= ((_ extract 0 0) (|miter1#3| state)) #b1))
(define-fun |miter1#4| ((state |miter1_s|)) Bool (= ((_ extract 25 25) state) #b1)) ; \in_b
; yosys-smt2-input in_b 1
; yosys-smt2-witness {"offset": 0, "path": ["\\in_b"], "smtname": "in_b", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |miter1_n in_b| ((state |miter1_s|)) Bool (|miter1#4| state))
(define-fun |miter1#5| ((state |miter1_s|)) Bool (= ((_ extract 26 26) state) #b1)) ; \in_a
; yosys-smt2-input in_a 1
; yosys-smt2-witness {"offset": 0, "path": ["\\in_a"], "smtname": "in_a", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |miter1_n in_a| ((state |miter1_s|)) Bool (|miter1#5| state))
; yosys-smt2-assert 0 $auto$miter.cc:274:create_miter_equiv$20
(define-fun |miter1_a 0| ((state |miter1_s|)) Bool (or (|miter1#2| state) (not true))) ; $auto$miter.cc:274:create_miter_equiv$20
(define-fun |miter1_a| ((state |miter1_s|)) Bool (and
  (|miter1_a 0| state)
  (|optimized_a| (|miter1_h gold| state))
  (|unoptimized_a| (|miter1_h gate| state))
))
(define-fun |miter1_u| ((state |miter1_s|)) Bool (and
  (|optimized_u| (|miter1_h gold| state))
  (|unoptimized_u| (|miter1_h gate| state))
))
(define-fun |miter1_i| ((state |miter1_s|)) Bool (and
  (|optimized_i| (|miter1_h gold| state))
  (|unoptimized_i| (|miter1_h gate| state))
))
(define-fun |miter1_h| ((state |miter1_s|)) Bool (and
  (= (|miter1_is| state) (|optimized_is| (|miter1_h gold| state)))
  (= (|miter1#0| state) (|optimized_n y| (|miter1_h gold| state))) ; optimized.y
  (= (|miter1#4| state) (|optimized_n b| (|miter1_h gold| state))) ; optimized.b
  (= (|miter1#5| state) (|optimized_n a| (|miter1_h gold| state))) ; optimized.a
  (= (|miter1_is| state) (|unoptimized_is| (|miter1_h gate| state)))
  (= (|miter1#1| state) (|unoptimized_n y| (|miter1_h gate| state))) ; unoptimized.y
  (= (|miter1#4| state) (|unoptimized_n b| (|miter1_h gate| state))) ; unoptimized.b
  (= (|miter1#5| state) (|unoptimized_n a| (|miter1_h gate| state))) ; unoptimized.a
  (|optimized_h| (|miter1_h gold| state))
  (|unoptimized_h| (|miter1_h gate| state))
))
(define-fun |miter1_t| ((state |miter1_s|) (next_state |miter1_s|)) Bool (and
  (|optimized_t| (|miter1_h gold| state) (|miter1_h gold| next_state))
  (|unoptimized_t| (|miter1_h gate| state) (|miter1_h gate| next_state))
)) ; end of module miter1
; yosys-smt2-module miter2
(define-sort |miter2_s| () (_ BitVec 27))
(define-fun |miter2_is| ((state |miter2_s|)) Bool (= ((_ extract 0 0) state) #b1))
; yosys-smt2-cell optimized gold
; yosys-smt2-witness {"path": ["\\gold"], "smtname": "gold", "type": "cell"}
(define-fun |miter2#0| ((state |miter2_s|)) Bool (= ((_ extract 1 1) state) #b1)) ; \gold_y
(define-fun |miter2_h gold| ((state |miter2_s|)) (_ BitVec 11) ((_ extract 12 2) state))
; yosys-smt2-cell improve gate
; yosys-smt2-witness {"path": ["\\gate"], "smtname": "gate", "type": "cell"}
(define-fun |miter2#1| ((state |miter2_s|)) Bool (= ((_ extract 13 13) state) #b1)) ; \gate_y
(define-fun |miter2_h gate| ((state |miter2_s|)) (_ BitVec 11) ((_ extract 24 14) state))
(define-fun |miter2#2| ((state |miter2_s|)) Bool (= (ite (|miter2#0| state) #b1 #b0) (ite (|miter2#1| state) #b1 #b0))) ; $auto$miter.cc:242:create_miter_equiv$23
(define-fun |miter2#3| ((state |miter2_s|)) (_ BitVec 1) (bvnot (ite (|miter2#2| state) #b1 #b0))) ; \trigger
; yosys-smt2-output trigger 1
(define-fun |miter2_n trigger| ((state |miter2_s|)) Bool (= ((_ extract 0 0) (|miter2#3| state)) #b1))
(define-fun |miter2#4| ((state |miter2_s|)) Bool (= ((_ extract 25 25) state) #b1)) ; \in_b
; yosys-smt2-input in_b 1
; yosys-smt2-witness {"offset": 0, "path": ["\\in_b"], "smtname": "in_b", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |miter2_n in_b| ((state |miter2_s|)) Bool (|miter2#4| state))
(define-fun |miter2#5| ((state |miter2_s|)) Bool (= ((_ extract 26 26) state) #b1)) ; \in_a
; yosys-smt2-input in_a 1
; yosys-smt2-witness {"offset": 0, "path": ["\\in_a"], "smtname": "in_a", "smtoffset": 0, "type": "input", "width": 1}
(define-fun |miter2_n in_a| ((state |miter2_s|)) Bool (|miter2#5| state))
; yosys-smt2-assert 0 $auto$miter.cc:274:create_miter_equiv$24
(define-fun |miter2_a 0| ((state |miter2_s|)) Bool (or (|miter2#2| state) (not true))) ; $auto$miter.cc:274:create_miter_equiv$24
(define-fun |miter2_a| ((state |miter2_s|)) Bool (and
  (|miter2_a 0| state)
  (|improve_a| (|miter2_h gate| state))
  (|optimized_a| (|miter2_h gold| state))
))
(define-fun |miter2_u| ((state |miter2_s|)) Bool (and
  (|improve_u| (|miter2_h gate| state))
  (|optimized_u| (|miter2_h gold| state))
))
(define-fun |miter2_i| ((state |miter2_s|)) Bool (and
  (|improve_i| (|miter2_h gate| state))
  (|optimized_i| (|miter2_h gold| state))
))
(define-fun |miter2_h| ((state |miter2_s|)) Bool (and
  (= (|miter2_is| state) (|improve_is| (|miter2_h gate| state)))
  (= (|miter2#1| state) (|improve_n y| (|miter2_h gate| state))) ; improve.y
  (= (|miter2#4| state) (|improve_n b| (|miter2_h gate| state))) ; improve.b
  (= (|miter2#5| state) (|improve_n a| (|miter2_h gate| state))) ; improve.a
  (= (|miter2_is| state) (|optimized_is| (|miter2_h gold| state)))
  (= (|miter2#0| state) (|optimized_n y| (|miter2_h gold| state))) ; optimized.y
  (= (|miter2#4| state) (|optimized_n b| (|miter2_h gold| state))) ; optimized.b
  (= (|miter2#5| state) (|optimized_n a| (|miter2_h gold| state))) ; optimized.a
  (|improve_h| (|miter2_h gate| state))
  (|optimized_h| (|miter2_h gold| state))
))
(define-fun |miter2_t| ((state |miter2_s|) (next_state |miter2_s|)) Bool (and
  (|improve_t| (|miter2_h gate| state) (|miter2_h gate| next_state))
  (|optimized_t| (|miter2_h gold| state) (|miter2_h gold| next_state))
)) ; end of module miter2
; end of yosys output

(declare-const state1 |miter1_s|)
(declare-const state2 |miter2_s|)

(assert (|miter1_h| state1))
(assert (|miter2_h| state2))

(assert (or
    (not (|miter1_a| state1))
    (not (|miter2_a| state2))))

(check-sat)
