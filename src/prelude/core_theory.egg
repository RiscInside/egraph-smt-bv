; <details>
; <summary>core_theory.egg - definitions from the SMT2LIB core theory</summary>

; ### "Boolean" relation

; `(Boolean v)` holds when `v` is a value of SMT2LIB sort `Bool`

(relation Boolean (V))

; ### Core theory operators

; We represent boolean constants as `B true` and `B false` instead of `True` and `False` to simplify folding operations.

(constructor B (bool) V)
(let tt (B true))
(let ff (B false))

; Main core theory operations of fixed arity. Unrolling variadic applications of
; binary boolean operators is handled in Rust lowering code.

(constructor Not (V) V)
(constructor Implies (V V) V)
(constructor And (V V) V)
(constructor Or (V V) V)
(constructor Xor (V V) V)
(constructor ITE (V V V) V)

; We can derive `Boolean` from them.

(rule ((= e (Not e1))) ((Boolean e)) :ruleset safe)
(rule ((= e (Implies e1 e2))) ((Boolean e)) :ruleset safe)
(rule ((= e (And e1 e2))) ((Boolean e)) :ruleset safe)
(rule ((= e (Or e1 e2))) ((Boolean e)) :ruleset safe)
(rule ((= e (Xor e1 e2))) ((Boolean e)) :ruleset safe)
(rule ((= e (ITE c e1 e2)) (Boolean e1)) ((Boolean e)) :ruleset safe)

; Variadic equality/disequality operators

(constructor AllEqual (VS) V :unextractable)
(constructor AllDistinct (VS) V :unextractable)
(rule ((= e (AllEqual vs))) ((delete (AllEqual vs))) :ruleset post-desugar)
(rule ((= e (AllDistinct vs))) ((delete (AllDistinct vs))) :ruleset post-desugar)

; Binary equality operator `Equal` (and `AllEqual`/`AllDistinct` desugaring)

(constructor Equal (V V) V)
(rewrite (AllEqual (VSCons v (VSNil))) tt :subsume :ruleset desugar)
(rewrite (AllEqual (VSCons v1 (VSCons v2 vs)))
         (And (Equal v1 v2) (AllEqual (VSCons v2 vs))) :subsume :ruleset desugar)

(constructor AllDistinctFrom (V VS) V :unextractable)

(rewrite (AllDistinct (VSNil)) tt :subsume :ruleset desugar)
(rewrite (AllDistinct (VSCons v vs))
         (And (AllDistinctFrom v vs) (AllDistinct vs)) :subsume :ruleset desugar)
(rewrite (AllDistinctFrom v (VSNil)) tt :subsume :ruleset desugar)
(rewrite (AllDistinctFrom v (VSCons v1 vs))
          (And (Not (Equal v v1)) (AllDistinctFrom v vs)) :subsume :ruleset desugar)

; </details>
