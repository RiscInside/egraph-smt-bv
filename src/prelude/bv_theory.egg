; <summary>bv_theory.egg - definitions from the SMT2LIB FixedSizeBitVectors theory</summary>

; ### Moving bits around

(constructor Concat (V V) V)
(constructor Extract (i64 i64 V) V)
(constructor Repeat (i64 V) V)
(constructor RotateRight (i64 V) V)
(constructor RotateLeft (i64 V) V)
(constructor ZeroExtend (i64 V) V)
(constructor SignExtend (i64 V) V)

; Rust code lowers variadic `concat` operations to binary `Concat` calls.

; ### Unary bitvector operators

(constructor BvNot (V) V)
(constructor BvNeg (V) V)

; ### Binary bitvector operators

; Some of these support left-associative chaining, but this is handled fully
; by Rust code

; #### Bitwise logical operators

(constructor BvAnd (V V) V)
(constructor BvOr (V V) V)
(constructor BvXor (V V) V)
(constructor BvNand (V V) V)
(constructor BvNor (V V) V)
(constructor BvXNor (V V) V)

; #### Arithmetic operators

(constructor BvAdd (V V) V)
(constructor BvSub (V V) V)
(constructor BvMul (V V) V)
(constructor BvUDiv (V V) V)
(constructor BvURem (V V) V)
(constructor BvSDiv (V V) V)
(constructor BvSRem (V V) V)
(constructor BvSMod (V V) V)

(constructor BvShl (V V) V)
(constructor BvLShr (V V) V)
(constructor BvAShr (V V) V)

; We also define custom constant shifts to simplify some rewrite rules.

(constructor BvShlC (V i64) V)
(constructor BvLShrC (V i64) V)
(constructor BvAShrC (V i64) V)

; ### Bitvector constants

; We use two different types for small and large bitvectors

(constructor BvSmall (i64 SmallBitVec) V)
(constructor BvLarge (i64 BigInt) V)

; We also define `(BvAll b w)` to represent all-zero/all-one bitvectors
; of width `w` (`b = false` for all-zeros and `b = true` for all-ones).

(constructor BvAll (bool i64) V)

; ### `Width` of bit-vectors

; This function returns width of the bit-vector. Currently it is computed
; bottom-up and returns a single i64 value, but it may be converted to return
; a symbolic value in the future

(function Width (V) i64 :no-merge)

; #### Propagation rules

; We define width propagation rules for basic primitives. This mostly resemble
; ones implemented in the Rust sort checker.

(rule ((= e (ITE c e1 e2)) (= w1 (Width e1))) ((set (Width e) w1)) :ruleset safe)

(rule ((= e (Concat lhs rhs)) (= lw (Width lhs)) (= rw (Width rhs)))
      ((set (Width e) (+ lw rw))) :ruleset safe)
(rule ((= e (Extract i j exp))) ((set (Width e) (+ (- i j) 1))) :ruleset safe)
(rule ((= e (Repeat n exp)) (= w (Width exp))) ((set (Width e) (* w n))) :ruleset safe)
(rule ((= e (RotateLeft _ exp)) (= w (Width exp))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (ZeroExtend n exp)) (= w (Width exp))) ((set (Width e) (+ w n))) :ruleset safe)
(rule ((= e (SignExtend n exp)) (= w (Width exp))) ((set (Width e) (+ w n))) :ruleset safe)

(rule ((= e (BvNot e1)) (= w (Width e))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvNeg e1)) (= w (Width e))) ((set (Width e) w)) :ruleset safe)

(rule ((= e (BvAnd e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvOr e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvXor e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvNand e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvNor e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvXNor e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)

(rule ((= e (BvAdd e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvSub e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvMul e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvUDiv e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvURem e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvSDiv e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvSRem e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvSMod e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvShl e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvLShr e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvAShr e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)

(rule ((= e (BvSmall w v))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvLarge w v))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvAll b w))) ((set (Width e) w)) :ruleset safe)

(rule ((= e (BvShlC e1 c)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvLShrC e1 c)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)
(rule ((= e (BvAShrC e1 c)) (= w (Width e1))) ((set (Width e) w)) :ruleset safe)

; #### Constant folding rules for bitvectors

(rewrite (BvNot (BvSmall w a)) (BvSmall w (not-sbv a w)) :subsume :ruleset safe)
(rewrite (BvNeg (BvSmall w a)) (BvSmall w (neg a w)) :subsume :ruleset safe)

(rewrite (BvAnd (BvSmall w a) (BvSmall _w b)) (BvSmall w (& a b w)) :subsume :ruleset safe)
(rewrite (BvOr (BvSmall w a) (BvSmall _w b)) (BvSmall w (| a b w)) :subsume :ruleset safe)
(rewrite (BvXor (BvSmall w a) (BvSmall _w b)) (BvSmall w (^ a b w)) :subsume :ruleset safe)

(rewrite (BvAdd (BvSmall w a) (BvSmall _w b)) (BvSmall w (+ a b w)) :subsume :ruleset safe)
(rewrite (BvSub (BvSmall w a) (BvSmall _w b)) (BvSmall w (- a b w)) :subsume :ruleset safe)
(rewrite (BvMul (BvSmall w a) (BvSmall _w b)) (BvSmall w (* a b w)) :subsume :ruleset safe)
(rewrite (BvUDiv (BvSmall w a) (BvSmall _w b)) (BvSmall w (/u a b w)) :subsume :ruleset safe)

(rewrite (BvShl (BvSmall w a) (BvSmall _w b)) (BvSmall w (<< a b w)) :subsume :ruleset safe)
(rewrite (BvLShr (BvSmall w a) (BvSmall _w b)) (BvSmall w (>> a b w)) :subsume :ruleset safe)

(rewrite (Concat (BvSmall w1 a) (BvSmall w2 b)) (BvSmall (+ w1 w2) (concat a b w2)) :subsume :ruleset safe)
(rewrite (Extract i j (BvSmall w a)) (BvSmall (- (+ i 1) j) (extract a i j)) :subsume :ruleset safe)
