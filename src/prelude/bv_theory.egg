; <summary>bv_theory.egg - definitions from the SMT2LIB FixedSizeBitVectors theory</summary>

; ### Moving bits around

(constructor Concat (V V) V)
(constructor Extract (i64 i64 V) V)
(constructor Repeat (i64 V) V)
(constructor RotateRight (i64 V) V)
(constructor RotateLeft (i64 V) V)
(constructor ZeroExtend (i64 V) V)
(constructor SignExtend (i64 V) V)

; Rust code lowers variadic `concat` operations to binary `Concat` calls.

; ### Unary bitvector operators

(constructor BvNot (V) V)
(constructor BvNeg (V) V)

; ### Binary bitvector operators

; Some of these support left-associative chaining, but this is handled fully
; by Rust code

; #### Bitwise logical operators

(constructor BvAnd (V V) V)
(constructor BvOr (V V) V)
(constructor BvXor (V V) V)
(constructor BvNand (V V) V)
(constructor BvNor (V V) V)
(constructor BvXNor (V V) V)

; #### Arithmetic operators

(constructor BvAdd (V V) V)
(constructor BvSub (V V) V)
(constructor BvMul (V V) V)
(constructor BvUDiv (V V) V)
(constructor BvURem (V V) V)
(constructor BvSDiv (V V) V)
(constructor BvSRem (V V) V)
(constructor BvSMod (V V) V)

(constructor BvShl (V V) V)
(constructor BvLShr (V V) V)
(constructor BvAShr (V V) V)

; ### Comparison predicates

(constructor BvUle (V V) V)
(constructor BvUlt (V V) V)
(constructor BvUge (V V) V)
(constructor BvUgt (V V) V)
(constructor BvSle (V V) V)
(constructor BvSlt (V V) V)
(constructor BvSge (V V) V)
(constructor BvSgt (V V) V)

; ### Bitvector constants

; We use two different types for small and large bitvectors

(constructor BvSmall (i64 SmallBitVec) V)
(constructor BvLarge (i64 BigInt) V)

; We also define `(BvAll b w)` to represent all-zero/all-one bitvectors
; of width `w` (`b = false` for all-zeros and `b = true` for all-ones).

(constructor BvAll (bool i64) V)

; ### `Width` of bit-vectors

; This function returns width of the bit-vector. Currently it is computed
; bottom-up and returns a single i64 value, but it may be converted to return
; a symbolic value in the future

(function Width (V) i64 :no-merge)

; We define a custom ruleset for width propogation - it runs together with safe
; rules, but it also needs to run prior to desugaring.

(ruleset width)

; #### Propagation rules

; We define width propagation rules for basic primitives. This mostly resemble
; ones implemented in the Rust sort checker.

(rule ((= e (ITE c e1 e2)) (= w1 (Width e1))) ((set (Width e) w1)) :ruleset width)

(rule ((= e (Concat lhs rhs)) (= lw (Width lhs)) (= rw (Width rhs)))
      ((set (Width e) (+ lw rw))) :ruleset width)
(rule ((= e (Extract i j exp))) ((set (Width e) (+ (- i j) 1))) :ruleset width)
(rule ((= e (Repeat n exp)) (= w (Width exp))) ((set (Width e) (* w n))) :ruleset width)
(rule ((= e (RotateLeft _ exp)) (= w (Width exp))) ((set (Width e) w)) :ruleset width)
(rule ((= e (ZeroExtend n exp)) (= w (Width exp))) ((set (Width e) (+ w n))) :ruleset width)
(rule ((= e (SignExtend n exp)) (= w (Width exp))) ((set (Width e) (+ w n))) :ruleset width)

(rule ((= e (BvNot e1)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvNeg e1)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)

(rule ((= e (BvAnd e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvOr e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvXor e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvNand e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvNor e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvXNor e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)

(rule ((= e (BvAdd e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvSub e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvMul e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvUDiv e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvURem e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvSDiv e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvSRem e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvSMod e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvShl e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvLShr e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvAShr e1 e2)) (= w (Width e1))) ((set (Width e) w)) :ruleset width)

(rule ((= e (BvSmall w v))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvLarge w v))) ((set (Width e) w)) :ruleset width)
(rule ((= e (BvAll b w))) ((set (Width e) w)) :ruleset width)

; #### Constant folding rules for bitvectors

(rewrite (BvNot (BvSmall w a)) (BvSmall w (not-sbv a w)) :replace :ruleset safe)
(rewrite (BvNeg (BvSmall w a)) (BvSmall w (neg a w)) :replace :ruleset safe)

(rewrite (BvAnd (BvSmall w a) (BvSmall _w b)) (BvSmall w (& a b w)) :replace :ruleset safe)
(rewrite (BvOr (BvSmall w a) (BvSmall _w b)) (BvSmall w (| a b w)) :replace :ruleset safe)
(rewrite (BvXor (BvSmall w a) (BvSmall _w b)) (BvSmall w (^ a b w)) :replace :ruleset safe)

(rewrite (BvAdd (BvSmall w a) (BvSmall _w b)) (BvSmall w (+ a b w)) :replace :ruleset safe)
(rewrite (BvSub (BvSmall w a) (BvSmall _w b)) (BvSmall w (- a b w)) :replace :ruleset safe)
(rewrite (BvMul (BvSmall w a) (BvSmall _w b)) (BvSmall w (* a b w)) :replace :ruleset safe)
(rewrite (BvUDiv (BvSmall w a) (BvSmall _w b)) (BvSmall w (/u a b w)) :replace :ruleset safe)

(rewrite (BvShl (BvSmall w a) (BvSmall _w b)) (BvSmall w (<< a b w)) :replace :ruleset safe)
(rewrite (BvLShr (BvSmall w a) (BvSmall _w b)) (BvSmall w (>> a b w)) :replace :ruleset safe)

(rewrite (Concat (BvSmall w1 a) (BvSmall w2 b)) (BvSmall (+ w1 w2) (concat a b w2)) :replace :ruleset safe)
(rewrite (Extract i j (BvSmall w a)) (BvSmall (- (+ i 1) j) (extract a i j)) :replace :ruleset safe)
