; <summary>propositional.egg - Lifting booleans to propositions</summary>

; ### Deriving UNSAT from boolean constant propagation

(rule ((= (B true) (B false))) ((set (ProvenUnsat) true)) :ruleset safe)

; Similar rule exists for bitvector constants.

(rule ((= (BvSmall w1 v1) (BvSmall w2 v2)) (!= v1 v2)) ((set (ProvenUnsat) true)) :ruleset safe)
(rule ((= (BvLarge w1 v1) (BvLarge w2 v2)) (!= v1 v2)) ((set (ProvenUnsat) true)) :ruleset safe)

; ### If-then-else constant folding

(rewrite (ITE tt a b) a :replace :ruleset safe)
(rewrite (ITE ff a b) b :replace :ruleset safe)

; ### Equality rules

(rule ((= tt (Equal e1 e2))) ((union e1 e2)) :ruleset safe)
(rewrite (Equal e e) tt :ruleset safe)
(rewrite (Equal tt ff) ff :ruleset safe)

; We can also get rid of redundant equalities (to make e-graph a bit more readable4)
(rule ((= _ (Equal v v))) ((delete (Equal v v))) :ruleset safe)
